from manimlib.imports import *


class PlotFourierSeries(GraphScene):
    CONFIG = {
        "x_min": -3,
        # "x_min": -1 + 0.001,
        "x_max": 3,
        # "x_max": 1 + 0.001,
        # "x_tick_frequency": 0.001,
        "y_min": -1.5,
        "y_max": 1.5,
        "graph_origin": ORIGIN,
        "function_color": RED,
        "axes_color": GREEN,
        "x_labeled_nums": range(-3, 4, 1),
        "colors": [PINK, PURPLE, BLUE, TEAL, GREEN, YELLOW, GOLD, ORANGE, RED, MAROON,
                   PINK, PURPLE, BLUE, TEAL, GREEN, YELLOW, GOLD, ORANGE, RED, MAROON,
                   PINK, PURPLE, BLUE, TEAL, GREEN, YELLOW, GOLD, ORANGE, RED, MAROON,
                   PINK, PURPLE, BLUE, TEAL, GREEN, YELLOW, GOLD, ORANGE, RED, MAROON,
                   PINK, PURPLE, BLUE, TEAL, GREEN, YELLOW, GOLD, ORANGE, RED, MAROON]
    }

    def construct(self):

        self.setup_axes(animate=True)

        k = 50
        self.i = 0

        # part 1
        self.step = 0.001
        plot1 = self.get_graph(self.func_to_graph_plot1)
        plot1.set_color(GREEN_SCREEN)
        self.play(ShowCreation(plot1), run_time=0.9)
        self.wait(1)
        # f = self.mamad_func_1(self.x)
        # # plot_fourier_series(x, f, 10)
        #
        # A0 = np.sum(f * np.ones_like(x)) * self.step
        A0 = 0
        func = A0 / 2
        A = np.zeros(k)
        B = np.zeros(k)

        self.cos_amp = 0
        self.cos_freq = 0
        self.cos_freqs = []
        self.sin_freqs = []

        # # plot1 coefficients
        self.cos_amps = [-0.003999990130400135, 0.0019999605217122392, -0.003999911174214361, 0.0019998420884076184,
                         -0.003999753264959764, 0.001999644704761586, -0.003999516408870391, 0.001999368378566597,
                         -0.0039992006152969285, 0.0019990131207315047, -0.003998805896706361, 0.0019985789452811567,
                         -0.00399833226868153, 0.0019980658693562604, -0.003997779749920397, 0.0019974739132120616,
                         -0.003997148362235528, 0.0019968031002179265, -0.003996438130552857, 0.0019960534568565277,
                         -0.003995649082911376, 0.001995225012722461, -0.003994781250460981, 0.0019943178005212793,
                         -0.003993834667462728, 0.0019933318560680408, -0.003992809371285684, 0.0019922672182863545,
                         -0.00399170540240681, 0.0019911239292062185, -0.003990522804409063, 0.0019899020339626448,
                         -0.003989261623979426, 0.0019886015807940726, -0.003987921910906902, 0.0019872226210401094,
                         -0.003986503718081164, 0.0019857652091396574, -0.003985007101490124, 0.001984229402629064,
                         -0.003983432120217681, 0.001982615262139186, -0.003981778836441106, 0.0019809228513934176,
                         -0.003980047315429676, 0.001979152237205229, -0.003978237625540462, 0.001977303489475901,
                         -0.003976349838216998, 0.0019753766811906105]

        self.sin_amps = [-1.2732322143624666, -1.256628793106529e-05, -0.4243911907042165, -2.51320797665926e-05,
                         -0.2546112583031206, -3.769687943071176e-05, -0.18184005433946643, -5.026019088654721e-05,
                         -0.14140509448905017, -6.282151815606341e-05, -0.11566842883628578, -7.538036533964742e-05,
                         -0.09784623079058011, -8.793623663551387e-05, -0.08477271486959208, -0.0001004886363592803,
                         -0.07477187722370662, -0.00011303706896384114, -0.0668734000397758, -0.000125581039058293,
                         -0.06047661057128248, -0.00013812005142835914, -0.05518976589188649, -0.00015065361105543574,
                         -0.05074648096725896, -0.0001631812231358687, -0.04695929980609318, -0.00017570239310099822,
                         -0.04369247854861946, -0.00018821662663662052, -0.0408453041337521, -0.00020072342970196112,
                         -0.0383414789054488, -0.00021322230854983816, -0.03612214478259627, -0.00022571276974631794,
                         -0.03414116986027904, -0.00023819432018907705, -0.03236188528757453, -0.00025066646712791044,
                         -0.030754777205499594, -0.0002631287181838502, -0.029295822795292192, -0.0002755805813685193,
                         -0.027965270047147002, -0.00028802156510366396, -0.026746729077352326, -0.00030045117824078837,
                         -0.025626485980001914, -0.00031286893007953867]

        # plot2 coefficients

        # self.cos_amps = [-0.0013757383799094499, -0.0020682193023766047, -6.666599772813697e-06, 0.0010329635594161814,
        #                  0.00027824504279541174, 2.6316882895116577e-11, -0.00019431632193269978,
        #                  -0.0005175646369885118, -6.666064632394608e-06, 0.0004126763540446232, 0.0001278790837765218,
        #                  1.0524254401289568e-10, -0.00010343520115167237, -0.00029600644869416735,
        #                  -6.664994406643033e-06, 0.000257572886002392, 8.365103618776359e-05, 2.367021751936704e-10,
        #                  -6.995122050039448e-05, -0.00020735794242007888, -6.663389205678883e-06, 0.0001870482693293285,
        #                  6.249623283244609e-05, 4.2057117233262887e-10, -5.253862586974556e-05, -0.00015960475373164363,
        #                  -6.661249194660712e-06, 0.00014673038169436348, 5.009317759037213e-05, 6.566749781722336e-10,
        #                  -4.1865793543615306e-05, -0.00012974329508403005, -6.65857459373509e-06,
        #                  0.00012062742591945797, 4.194082737770621e-05, 9.447892224123677e-10, -3.465404337328648e-05,
        #                  -0.00010929856351940282, -6.655365678072122e-06, 0.00010234268613162523, 3.61728948252833e-05,
        #                  1.2846397960952771e-09, -2.945465487600707e-05, -9.441828752021242e-05, -6.651622777745558e-06,
        #                  8.881686605616057e-05, 3.187608933154662e-05, 1.6759027401391791e-09, -2.552848375157124e-05,
        #                  -8.30992881279844e-05]
        #
        # self.sin_amps = [-0.5256828111160116, -0.3950926161909172, -0.0008487998342661455, 0.09858934345299224,
        #                  0.021216615273782744, -3.582840690796729e-13, -0.010629110192215643, -0.02473209419927649,
        #                  -0.0002828625371356157, 0.015740316599335853, 0.004421643625130184, -2.866155313085983e-12,
        #                  -0.0030523748127863366, -0.008086121587998698, -0.00016963264194795724, 0.006133506574725006,
        #                  0.001866740602915625, -9.672502798707683e-12, -0.001414855404935937, -0.0039661192478768455,
        #                  -0.00012107524533728787, 0.003235265443166796, 0.0010280104899566909, -2.292463463504646e-11,
        #                  -0.0008089054252441295, -0.002348458049266082, -9.407536293290097e-05, 0.001991205522622119,
        #                  0.0006516077216978613, -4.476787029972229e-11, -0.0005205678332678599, -0.0015509861791887989,
        #                  -7.687436663442648e-05, 0.0013459246810348434, 0.0004506418866232449, -7.734446061391509e-11,
        #                  -0.0003614808061511896, -0.0011000032461075135, -6.49497105554917e-05, 0.000968888343016495,
        #                  0.0003307048290330135, -1.2279302641360346e-10, -0.0002646703535874546, -0.0008203216474325865,
        #                  -5.619087621191321e-05, 0.0007297278071463902, 0.0002533418772887368, -1.8324790440615857e-10,
        #                  -0.00020149746185019768, -0.0006349698558874164]

        self.prev_sum_func_graph = None

        old_counter = TextMobject("k = " + str(1))
        old_counter.set_color(BLUE)
        old_counter.move_to([3, 3, 0])

        for i in range(k):

            if i < 7:
                speed = 0.9
            elif i < 15:
                speed = 0.7
            elif i < 25:
                speed = 0.5
            elif i < 35:
                speed = 0.3
            else:
                speed = 0.1

            counter = TextMobject("k = " + str(i + 1))
            counter.move_to([3, 3, 0])
            counter.scale(1.5)

            self.cos_amp = self.cos_amps[i]
            self.sin_amp = self.sin_amps[i]
            self.cos_freq = i + 1
            self.cos_freqs.append(i + 1)
            self.sin_freq = i + 1
            self.sin_freqs.append(i + 1)
            cos_func_graph = self.get_graph(self.func_to_graph_cos, self.colors[i])
            sin_func_graph = self.get_graph(self.func_to_graph_sin, self.colors[i])
            sum_func_graph = self.get_graph(self.func_to_graph_sum, self.colors[i])
            vert_line = self.get_vertical_line_to_graph(TAU, sum_func_graph, color=YELLOW)

            if i != 0:
                self.play(ShowCreation(cos_func_graph), ShowCreation(sin_func_graph),
                          ReplacementTransform(old_counter, counter), run_time=speed)
            else:
                self.play(ShowCreation(cos_func_graph), ShowCreation(sin_func_graph), FadeIn(counter), run_time=speed)
            self.wait(0.5 * speed)
            if i != 0:
                self.play(ReplacementTransform(sin_func_graph, sum_func_graph), FadeOut(cos_func_graph),
                          FadeOut(self.prev_sum_func_graph),
                          run_time=speed)
            else:
                self.play(ReplacementTransform(sin_func_graph, sum_func_graph), FadeOut(cos_func_graph), run_time=speed)
            self.wait(1 * speed)
            self.prev_sum_func_graph = sum_func_graph
            old_counter = counter

        self.wait(1)

    def func_to_graph_cos(self, x):
        return self.cos_amp * np.cos(self.cos_freq * x)

    def func_to_graph_sin(self, x):
        return self.sin_amp * np.sin(self.sin_freq * x)

    def func_to_graph_sum(self, x):
        res = 0
        for i in range(len(self.cos_freqs)):
            res = res + self.cos_amps[i] * np.cos(self.cos_freqs[i] * x) + self.sin_amps[i] * np.sin(
                self.sin_freqs[i] * x)
        return res

    def func_to_graph_plot1(self, x):
        # return x ** 2
        if x < 0:
            return 1
        elif x == 0:
            return 0
        elif x < 3:
            return -1
        else:
            return 1

    def func_to_graph_plot2(self, x):
        # return x ** 2
        if x <= -2.01:
            return 0
        elif x <= -1.01:
            return x + 2
        elif x <= 0.99:
            return -x
        elif x <= 1.99:
            return x - 2
        else:
            return 0
